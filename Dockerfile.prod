# syntax=docker/dockerfile:1.4
FROM node:20.18.0 AS base

RUN npm install -g turbo

#############################################
FROM base AS pruner
WORKDIR /app
ARG APP
COPY . .
RUN turbo prune --scope=${APP} --docker

#############################################
FROM base AS installer
WORKDIR /app
ARG APP

COPY --from=pruner /app/out/json/ .
COPY --from=pruner /app/out/yarn.lock ./yarn.lock
COPY ./apps/${APP}/package.json ./apps/${APP}/package.json

RUN --mount=type=cache,target=/usr/local/share/.cache/yarn/v6 \
    yarn install --frozen-lockfile

COPY --from=pruner /app/out/full/ .
COPY turbo.json turbo.json

# В prod собираем само приложение (без ^...)
RUN turbo run build --filter=${APP}

#############################################
# Backend production stage
FROM node:20-alpine AS backend-runner
WORKDIR /app

ENV NODE_ENV=production

# Копируем только production зависимости
COPY --from=installer /app/package.json ./package.json
COPY --from=installer /app/yarn.lock ./yarn.lock
COPY --from=installer /app/apps/backend/package.json ./apps/backend/package.json
COPY --from=installer /app/turbo.json ./turbo.json

RUN yarn install --frozen-lockfile --production && \
    yarn cache clean

# Копируем собранный код
COPY --from=installer /app/apps/backend/dist ./apps/backend/dist

CMD ["node", "apps/backend/dist/controller.js"]

#############################################
# Frontend production stage
FROM nginx:alpine AS frontend-runner

# Копируем nginx конфиг
COPY --from=installer /app/apps/frontend/nginx.conf /etc/nginx/conf.d/default.conf

# Копируем собранные статические файлы
COPY --from=installer /app/apps/frontend/dist /usr/share/nginx/html

EXPOSE 80

